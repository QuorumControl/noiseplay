// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p/messages/p2p.proto

package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProxyMessage struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ID destination = 2;
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Sent            int32  `protobuf:"varint,4,opt,name=sent,proto3" json:"sent,omitempty"`
	Ttl             int32  `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Source          []byte `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Destination     []byte `protobuf:"bytes,7,opt,name=destination,proto3" json:"destination,omitempty"`
	Topic           []byte `protobuf:"bytes,8,opt,name=topic,proto3" json:"topic,omitempty"`
	SymKeyHash      []byte `protobuf:"bytes,9,opt,name=sym_key_hash,json=symKeyHash,proto3" json:"sym_key_hash,omitempty"`
	EnvelopeHash    []byte `protobuf:"bytes,10,opt,name=envelope_hash,json=envelopeHash,proto3" json:"envelope_hash,omitempty"`
	EnvelopeVersion uint64 `protobuf:"varint,11,opt,name=envelope_version,json=envelopeVersion,proto3" json:"envelope_version,omitempty"`
}

func (m *ProxyMessage) Reset()      { *m = ProxyMessage{} }
func (*ProxyMessage) ProtoMessage() {}
func (*ProxyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_f088d09d9299ed56, []int{0}
}
func (m *ProxyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProxyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyMessage.Merge(dst, src)
}
func (m *ProxyMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProxyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyMessage proto.InternalMessageInfo

func (m *ProxyMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ProxyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ProxyMessage) GetSent() int32 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *ProxyMessage) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *ProxyMessage) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ProxyMessage) GetDestination() []byte {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *ProxyMessage) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ProxyMessage) GetSymKeyHash() []byte {
	if m != nil {
		return m.SymKeyHash
	}
	return nil
}

func (m *ProxyMessage) GetEnvelopeHash() []byte {
	if m != nil {
		return m.EnvelopeHash
	}
	return nil
}

func (m *ProxyMessage) GetEnvelopeVersion() uint64 {
	if m != nil {
		return m.EnvelopeVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*ProxyMessage)(nil), "messages.ProxyMessage")
}
func (this *ProxyMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProxyMessage)
	if !ok {
		that2, ok := that.(ProxyMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProxyMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProxyMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProxyMessage but is not nil && this == nil")
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return fmt.Errorf("Payload this(%v) Not Equal that(%v)", this.Payload, that1.Payload)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if this.Sent != that1.Sent {
		return fmt.Errorf("Sent this(%v) Not Equal that(%v)", this.Sent, that1.Sent)
	}
	if this.Ttl != that1.Ttl {
		return fmt.Errorf("Ttl this(%v) Not Equal that(%v)", this.Ttl, that1.Ttl)
	}
	if !bytes.Equal(this.Source, that1.Source) {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if !bytes.Equal(this.Destination, that1.Destination) {
		return fmt.Errorf("Destination this(%v) Not Equal that(%v)", this.Destination, that1.Destination)
	}
	if !bytes.Equal(this.Topic, that1.Topic) {
		return fmt.Errorf("Topic this(%v) Not Equal that(%v)", this.Topic, that1.Topic)
	}
	if !bytes.Equal(this.SymKeyHash, that1.SymKeyHash) {
		return fmt.Errorf("SymKeyHash this(%v) Not Equal that(%v)", this.SymKeyHash, that1.SymKeyHash)
	}
	if !bytes.Equal(this.EnvelopeHash, that1.EnvelopeHash) {
		return fmt.Errorf("EnvelopeHash this(%v) Not Equal that(%v)", this.EnvelopeHash, that1.EnvelopeHash)
	}
	if this.EnvelopeVersion != that1.EnvelopeVersion {
		return fmt.Errorf("EnvelopeVersion this(%v) Not Equal that(%v)", this.EnvelopeVersion, that1.EnvelopeVersion)
	}
	return nil
}
func (this *ProxyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyMessage)
	if !ok {
		that2, ok := that.(ProxyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.Sent != that1.Sent {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	if !bytes.Equal(this.Source, that1.Source) {
		return false
	}
	if !bytes.Equal(this.Destination, that1.Destination) {
		return false
	}
	if !bytes.Equal(this.Topic, that1.Topic) {
		return false
	}
	if !bytes.Equal(this.SymKeyHash, that1.SymKeyHash) {
		return false
	}
	if !bytes.Equal(this.EnvelopeHash, that1.EnvelopeHash) {
		return false
	}
	if this.EnvelopeVersion != that1.EnvelopeVersion {
		return false
	}
	return true
}
func (this *ProxyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&messages.ProxyMessage{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "Sent: "+fmt.Sprintf("%#v", this.Sent)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "SymKeyHash: "+fmt.Sprintf("%#v", this.SymKeyHash)+",\n")
	s = append(s, "EnvelopeHash: "+fmt.Sprintf("%#v", this.EnvelopeHash)+",\n")
	s = append(s, "EnvelopeVersion: "+fmt.Sprintf("%#v", this.EnvelopeVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringP2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProxyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Sent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Sent))
	}
	if m.Ttl != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.Ttl))
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Destination) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.SymKeyHash) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.SymKeyHash)))
		i += copy(dAtA[i:], m.SymKeyHash)
	}
	if len(m.EnvelopeHash) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintP2P(dAtA, i, uint64(len(m.EnvelopeHash)))
		i += copy(dAtA[i:], m.EnvelopeHash)
	}
	if m.EnvelopeVersion != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintP2P(dAtA, i, uint64(m.EnvelopeVersion))
	}
	return i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedProxyMessage(r randyP2P, easy bool) *ProxyMessage {
	this := &ProxyMessage{}
	v1 := r.Intn(100)
	this.Payload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Signature = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	this.Sent = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sent *= -1
	}
	this.Ttl = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Ttl *= -1
	}
	v3 := r.Intn(100)
	this.Source = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Source[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.Destination = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Destination[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.Topic = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Topic[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.SymKeyHash = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.SymKeyHash[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.EnvelopeHash = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.EnvelopeHash[i] = byte(r.Intn(256))
	}
	this.EnvelopeVersion = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyP2P interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneP2P(r randyP2P) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringP2P(r randyP2P) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneP2P(r)
	}
	return string(tmps)
}
func randUnrecognizedP2P(r randyP2P, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldP2P(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldP2P(dAtA []byte, r randyP2P, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateP2P(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateP2P(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ProxyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Sent != 0 {
		n += 1 + sovP2P(uint64(m.Sent))
	}
	if m.Ttl != 0 {
		n += 1 + sovP2P(uint64(m.Ttl))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.SymKeyHash)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.EnvelopeHash)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.EnvelopeVersion != 0 {
		n += 1 + sovP2P(uint64(m.EnvelopeVersion))
	}
	return n
}

func sovP2P(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProxyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Sent:` + fmt.Sprintf("%v", this.Sent) + `,`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`SymKeyHash:` + fmt.Sprintf("%v", this.SymKeyHash) + `,`,
		`EnvelopeHash:` + fmt.Sprintf("%v", this.EnvelopeHash) + `,`,
		`EnvelopeVersion:` + fmt.Sprintf("%v", this.EnvelopeVersion) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringP2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProxyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			m.Sent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = append(m.Source[:0], dAtA[iNdEx:postIndex]...)
			if m.Source == nil {
				m.Source = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = append(m.Destination[:0], dAtA[iNdEx:postIndex]...)
			if m.Destination == nil {
				m.Destination = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = append(m.Topic[:0], dAtA[iNdEx:postIndex]...)
			if m.Topic == nil {
				m.Topic = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymKeyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymKeyHash = append(m.SymKeyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SymKeyHash == nil {
				m.SymKeyHash = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvelopeHash = append(m.EnvelopeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EnvelopeHash == nil {
				m.EnvelopeHash = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeVersion", wireType)
			}
			m.EnvelopeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvelopeVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowP2P
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipP2P(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthP2P = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("p2p/messages/p2p.proto", fileDescriptor_p2p_f088d09d9299ed56) }

var fileDescriptor_p2p_f088d09d9299ed56 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xaf, 0xff, 0x6f, 0xf3, 0x89, 0xca, 0x42, 0x95, 0x85, 0xd0, 0x55, 0x54, 0x96,
	0xb2, 0x10, 0xa9, 0xf0, 0x04, 0x4c, 0x48, 0x08, 0x09, 0x75, 0x60, 0xad, 0xd2, 0xd6, 0xa4, 0x11,
	0x6d, 0x6c, 0xc5, 0x6e, 0x45, 0x36, 0x1e, 0x81, 0xc7, 0x60, 0x62, 0xe6, 0x11, 0x18, 0x3b, 0x76,
	0x6c, 0xd2, 0x17, 0x60, 0x64, 0x44, 0xbd, 0x21, 0xc0, 0x76, 0xce, 0xef, 0xfc, 0x6c, 0x59, 0x86,
	0xae, 0x1e, 0x68, 0x7f, 0x21, 0x8d, 0x09, 0x42, 0x69, 0x7c, 0x3d, 0xd0, 0x67, 0x3a, 0x51, 0x56,
	0xf1, 0x66, 0xc9, 0x8e, 0x7a, 0xa1, 0x0a, 0x95, 0x4f, 0x74, 0xbc, 0xbc, 0xf7, 0xf7, 0x8d, 0x0a,
	0xa5, 0xc2, 0xee, 0xbd, 0xfe, 0x03, 0xf7, 0x36, 0x51, 0x8f, 0xe9, 0x4d, 0x71, 0x8a, 0x0b, 0x68,
	0xe8, 0x20, 0x9d, 0xab, 0x60, 0x2a, 0x98, 0xc7, 0xfa, 0xee, 0xb0, 0xac, 0xfc, 0x18, 0x5a, 0x26,
	0x0a, 0xe3, 0xc0, 0x2e, 0x13, 0x29, 0x2a, 0xb4, 0xfd, 0x02, 0xce, 0xa1, 0x6a, 0x64, 0x6c, 0x45,
	0xd5, 0x63, 0xfd, 0xda, 0x90, 0x32, 0xef, 0x40, 0xc5, 0xda, 0xb9, 0xa8, 0x11, 0xda, 0x47, 0xde,
	0x85, 0xba, 0x51, 0xcb, 0x64, 0x22, 0x45, 0x9d, 0x2e, 0xf8, 0x6e, 0xdc, 0x83, 0xf6, 0x54, 0x1a,
	0x1b, 0xc5, 0x81, 0x8d, 0x54, 0x2c, 0x1a, 0x34, 0xfe, 0x45, 0xfc, 0x10, 0x6a, 0x56, 0xe9, 0x68,
	0x22, 0x9a, 0xb4, 0x15, 0x85, 0x7b, 0xe0, 0x9a, 0x74, 0x31, 0x7a, 0x90, 0xe9, 0x68, 0x16, 0x98,
	0x99, 0x68, 0xd1, 0x08, 0x26, 0x5d, 0x5c, 0xcb, 0xf4, 0x2a, 0x30, 0x33, 0x7e, 0x02, 0xff, 0x65,
	0xbc, 0x92, 0x73, 0xa5, 0x65, 0xa1, 0x00, 0x29, 0x6e, 0x09, 0x49, 0x3a, 0x85, 0xce, 0x8f, 0xb4,
	0x92, 0x89, 0xd9, 0xbf, 0xa1, 0xed, 0xb1, 0x7e, 0x75, 0x78, 0x50, 0xf2, 0xbb, 0x02, 0x5f, 0x5e,
	0x6c, 0x32, 0x74, 0xb6, 0x19, 0xb2, 0x8f, 0x0c, 0xd9, 0x67, 0x86, 0xec, 0x29, 0x47, 0xf6, 0x92,
	0x23, 0x7b, 0xcb, 0x91, 0xbd, 0xe7, 0xc8, 0xd6, 0x39, 0xb2, 0x6d, 0x8e, 0xec, 0x79, 0x87, 0xce,
	0x7a, 0x87, 0xce, 0x66, 0x87, 0xce, 0xb8, 0x4e, 0xbf, 0x7d, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff,
	0xfd, 0xa4, 0x13, 0x22, 0xb5, 0x01, 0x00, 0x00,
}
